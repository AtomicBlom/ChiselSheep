buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

import org.apache.tools.ant.filters.ReplaceTokens

def isCIBuild = hasProperty("CIRevision")
if (isCIBuild) {
    println("Producing a Release build")
} else {
    println("This build will produce an unsactioned release")
}

// combine in the dependency properties file
Properties props = new Properties()
props.load(new FileInputStream("./dependency.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

version = (hasProperty("CIRevision") ? CIRevision : project.mod_version)
group = project.group_name
archivesBaseName = "${project.mod_id}-${project.minecraft_version_on_jar}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }

        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir 'src/main/java'

            //Integrations
            srcDir 'src/integrations/vanilla/java'
            srcDir 'src/integrations/immersiveengineering/java'
            srcDir 'src/integrations/silly/java'

            //srcDir 'src/integrations/chancecubes/java'
            //srcDir 'src/integrations/chisel/java'
        }
        resources {
            srcDir 'src/main/resources'

            //Integrations
            srcDir 'src/integrations/silly/resources'

            //srcDir 'src/integrations/chancecubes/resources'
        }

        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.api.output
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}
tasks.build.dependsOn apiJar

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: project.mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                shearmadness {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                shearmadness {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/')

            mods {
                shearmadness {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

task processSource(type: Sync) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [IS_CI_BUILD: isCIBuild.toString()])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

repositories { //Access to Gigaherz private maven server for community mappings
    maven { url = 'https://dvs1.progwml6.com/files/maven'  } // JEI & Tinkers
    maven { url = 'https://www.dogforce-games.com/maven/'  } // 1.16 mappings
    maven { url = 'https://maven.blamejared.com/'          } // IE
    maven { url = 'http://maven.tterrag.com/'              } // Chisel
    //maven { url = 'http://maven.theprogrammingturkey.com/' } // Chance Cubes
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version
    compile fg.deobf(group: 'team.chisel.ctm', name: 'CTM', version: project.ctm_version)

    //These are all optional dependencies, used for dev time. I don't use their APIs specifically
    if (!isCIBuild && project.hasProperty('project.jei_version')) {
        compile fg.deobf(group: 'mezz.jei', name: 'jei-1.16.2', version: project.jei_version)
    }
    if (!isCIBuild && project.hasProperty('immersive_engineering_version')) {
        compile fg.deobf(group: 'blusunrize.immersiveengineering', name: 'ImmersiveEngineering', version: project.immersive_engineering_version)
    }
    if (!isCIBuild && project.hasProperty('chisel_version')) {
        compile fg.deobf(group: 'team.chisel', name: 'Chisel', version: project.chisel_version)
    }
    if (!isCIBuild && project.hasProperty('chancecubes_version')) {
        compile fg.deobf(group: 'com.theprogrammingturkey.chancecubes', name: 'ChanceCubes', version: project.chancecubes_version)
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.api.output
    from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title": project.mod_id,
            "Specification-Vendor": "atomicblom",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"atomicblom",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "9999"
        }
    }
}